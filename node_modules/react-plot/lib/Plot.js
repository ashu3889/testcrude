"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var number = _react.PropTypes.number,
    array = _react.PropTypes.array,
    arrayOf = _react.PropTypes.arrayOf;


function _roundForStep(maxValue, step) {
	var rest = maxValue % step;
	var mustRound = rest > 0;

	if (mustRound) {
		var correction = step - rest;

		return maxValue + correction;
	}

	return maxValue;
}

var Graph = function Graph(_ref) {
	var width = _ref.width,
	    height = _ref.height,
	    children = _ref.children;
	return _react2.default.createElement(
		"svg",
		{
			xmlns: "http://www.w3.org/2000/svg",
			width: width,
			height: height
		},
		children
	);
};

var Plot = function Plot(_ref2) {
	var width = _ref2.width,
	    height = _ref2.height,
	    xStep = _ref2.xStep,
	    yStep = _ref2.yStep,
	    data = _ref2.data,
	    children = _ref2.children;

	var xValues = data.map(function (_ref3) {
		var _ref4 = _slicedToArray(_ref3, 1),
		    x = _ref4[0];

		return x;
	});
	var xMax = Math.max.apply(Math, _toConsumableArray(xValues));
	var xRound = _roundForStep(xMax, xStep);
	var xPositions = xValues.map(function (x) {
		var ratio = x / xRound;
		var position = width * ratio;

		return position;
	});
	var xTickCount = xRound / xStep;
	var xTickTravel = width / xTickCount;

	var yValues = data.map(function (_ref5) {
		var _ref6 = _slicedToArray(_ref5, 2),
		    y = _ref6[1];

		return y;
	});
	var yMax = Math.max.apply(Math, _toConsumableArray(yValues));
	var yRound = _roundForStep(yMax, yStep);
	var yPositions = yValues.map(function (y) {
		var ratio = y / yRound;
		var position = height * ratio;

		return position;
	});
	var yTickCount = yRound / yStep;
	var yTickTravel = height / yTickCount;

	var positions = [];

	for (var i = 0; i < data.length; i++) {
		positions[i] = [xPositions[i], yPositions[i]];
	}

	return _react2.default.createElement(
		Graph,
		{
			width: width,
			height: height
		},
		_react2.default.Children.map(children, function (child) {
			return _react2.default.cloneElement(child, {
				width: width,
				height: height,
				positions: positions,
				xTick: [xTickCount, xTickTravel, xRound],
				yTick: [yTickCount, yTickTravel, yRound]
			});
		})
	);
};

Plot.PropTypes = {
	width: number.isRequired,
	height: number.isRequired,
	data: arrayOf(array)
};

exports.default = Plot;