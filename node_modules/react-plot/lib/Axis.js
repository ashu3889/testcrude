"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _react = require("react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Tick = function Tick(_ref) {
	var direction = _ref.direction;
	return _react2.default.createElement("path", {
		fill: "none",
		strokeWidth: "1",
		stroke: "#ccc",
		d: direction
	});
};

var Label = function Label(_ref2) {
	var x = _ref2.x,
	    y = _ref2.y,
	    textAnchor = _ref2.textAnchor,
	    fill = _ref2.fill,
	    text = _ref2.text;
	return _react2.default.createElement(
		"text",
		{
			x: x,
			y: y,
			textAnchor: textAnchor,
			fill: "#aaa"
		},
		text
	);
};

var Axis = function Axis(_ref3) {
	var width = _ref3.width,
	    height = _ref3.height,
	    _ref3$xTick = _slicedToArray(_ref3.xTick, 3),
	    xTickCount = _ref3$xTick[0],
	    xTickTravel = _ref3$xTick[1],
	    xMaxRounded = _ref3$xTick[2],
	    _ref3$yTick = _slicedToArray(_ref3.yTick, 3),
	    yTickCount = _ref3$yTick[0],
	    yTickTravel = _ref3$yTick[1],
	    yMaxRounded = _ref3$yTick[2],
	    orientation = _ref3.orientation,
	    customLabel = _ref3.customLabel,
	    _ref3$color = _ref3.color,
	    color = _ref3$color === undefined ? '#ccc' : _ref3$color,
	    _ref3$thickness = _ref3.thickness,
	    thickness = _ref3$thickness === undefined ? 1 : _ref3$thickness;

	var X_ORIENTATIONS = ['top', 'bottom'];
	var Y_ORIENTATIONS = ['left', 'right'];

	var hasValidOrientation = [].concat(X_ORIENTATIONS, Y_ORIENTATIONS).includes(orientation);

	if (!hasValidOrientation) {
		throw new Error('Provide an axis orientation: "top", "left", "bottom" or "right".');
	}

	var isX = X_ORIENTATIONS.includes(orientation);
	var defaultLabelStep = isX ? xMaxRounded / xTickCount : yMaxRounded / yTickCount;

	var max = isX ? xTickCount : yTickCount;
	var tickLength = 8;
	var labelCorrection = 5;
	var ticks = [];
	var labels = [];

	for (var i = 0; i < max + 1; i++) {
		var _direction = void 0;
		var labelAnchor = void 0;
		var labelX = void 0;
		var labelY = void 0;

		if (orientation === 'left') {
			_direction = "M 0 " + i * yTickTravel + " h -" + tickLength;

			labelAnchor = 'end';
			labelX = 0 - tickLength - labelCorrection;
			labelY = height - (i * yTickTravel - 5);
		}

		if (orientation === 'right') {
			_direction = "M " + width + " " + i * yTickTravel + " h " + tickLength;

			labelAnchor = 'start';
			labelX = width + tickLength + labelCorrection;
			labelY = height - (i * yTickTravel - 5);
		}

		if (orientation === 'top') {
			_direction = "M " + i * xTickTravel + " 0 v -" + tickLength;

			labelAnchor = 'middle';
			labelX = i * xTickTravel;
			labelY = 0 - tickLength - labelCorrection;
		}

		if (orientation === 'bottom') {
			_direction = "M " + i * xTickTravel + " " + height + " v " + tickLength;

			labelAnchor = 'middle';
			labelX = i * xTickTravel;
			labelY = height + tickLength + labelCorrection + 10;
		}

		ticks.push(_react2.default.createElement(Tick, {
			key: i,
			direction: _direction
		}));

		var defaultLabelText = defaultLabelStep * i;
		var labelText = typeof customLabel === 'function' ? customLabel(i, defaultLabelText) : defaultLabelText;

		labels.push(_react2.default.createElement(Label, {
			key: i,
			x: labelX,
			y: labelY,
			textAnchor: labelAnchor,
			text: labelText
		}));
	}

	var direction = void 0;

	if (orientation === 'left') {
		direction = "M 0 0 v " + height;
	}

	if (orientation === 'right') {
		direction = "M " + width + " 0 v " + height;
	}

	if (orientation === 'top') {
		direction = "M 0 0 h " + width;
	}

	if (orientation === 'bottom') {
		direction = "M 0 " + height + " h " + width;
	}

	return _react2.default.createElement(
		"g",
		null,
		_react2.default.createElement("path", {
			d: direction,
			stroke: color,
			strokeWidth: thickness
		}),
		_react2.default.createElement(
			"g",
			null,
			ticks
		),
		_react2.default.createElement(
			"g",
			null,
			labels
		)
	);
};

exports.default = Axis;